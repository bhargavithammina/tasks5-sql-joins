-- Clear tables if they exist (optional, for testing)
DROP TABLE IF EXISTS Orders;
DROP TABLE IF EXISTS Customers;

-- Create Customers table
CREATE TABLE Customers (
    CustomerID INTEGER PRIMARY KEY,
    CustomerName TEXT,
    City TEXT
);

-- Create Orders table
CREATE TABLE Orders (
    OrderID INTEGER PRIMARY KEY,
    CustomerID INTEGER,
    Product TEXT,
    Quantity INTEGER,
    Price REAL,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);

-- Insert Customers (unique CustomerID)
INSERT INTO Customers (CustomerID, CustomerName, City) VALUES
(1, 'Alice', 'Mumbai'),
(2, 'Bob', 'Delhi'),
(3, 'Charlie', 'Bangalore'),
(4, 'Diana', 'Hyderabad');

-- Insert Orders with valid CustomerID
INSERT INTO Orders (OrderID, CustomerID, Product, Quantity, Price) VALUES
(101, 1, 'Laptop', 1, 50000),
(102, 2, 'Mouse', 2, 500),
(103, 1, 'Keyboard', 1, 1500),
(104, 4, 'Monitor', 1, 7000);
SELECT * from Orders;
-- INNER JOIN: customers with matching orders
SELECT Customers.CustomerName, Orders.Product, Orders.Quantity
FROM Customers
INNER JOIN Orders ON Customers.CustomerID = Orders.CustomerID;

-- LEFT JOIN: all customers, orders if any
SELECT Customers.CustomerName, Orders.Product, Orders.Quantity
FROM Customers
LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID;


-- SQLite FULL JOIN simulation:
SELECT Customers.CustomerName, Orders.Product, Orders.Quantity
FROM Customers
LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID

UNION

SELECT Customers.CustomerName, Orders.Product, Orders.Quantity
FROM Customers
RIGHT JOIN Orders ON Customers.CustomerID = Orders.CustomerID;
